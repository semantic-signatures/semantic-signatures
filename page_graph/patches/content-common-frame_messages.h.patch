diff --git a/content/common/frame_messages.h b/content/common/frame_messages.h
index e5bcd550ade968e1e38a02014632ec94c16fe8bb..b6be3d552560274f23edff808b649792c8a9bdfa 100644
--- a/content/common/frame_messages.h
+++ b/content/common/frame_messages.h
@@ -84,6 +84,8 @@
 #include "url/gurl.h"
 #include "url/origin.h"
 
+#include "brave/third_party/blink/brave_page_graph/buildflags/buildflags.h"
+
 #if BUILDFLAG(ENABLE_PLUGINS)
 #include "content/common/pepper_renderer_instance_data.h"
 #endif
@@ -850,6 +852,18 @@ IPC_MESSAGE_ROUTED3(FrameMsg_AddMessageToConsole,
                     std::string /* message */,
                     bool /* discard_duplicates */)
 
+#if BUILDFLAG(BRAVE_PAGE_GRAPH_ENABLED)
+// Record that a resource was blocked by an ad filter.
+IPC_MESSAGE_ROUTED2(FrameMsg_RegisterResourceBlockAd,
+                    GURL /* url */,
+                    std::string /* rule */)
+
+// Record that a resource was blocked by a tracker filter.
+IPC_MESSAGE_ROUTED2(FrameMsg_RegisterResourceBlockTracker,
+                    GURL /* url */,
+                    std::string /* host */)
+#endif
+
 // Tells the renderer to reload the frame, optionally bypassing the cache while
 // doing so.
 IPC_MESSAGE_ROUTED1(FrameMsg_Reload,
@@ -876,6 +890,12 @@ IPC_MESSAGE_ROUTED1(FrameMsg_ForwardResourceTimingToParent,
 // this frame.
 IPC_MESSAGE_ROUTED0(FrameMsg_DispatchLoad)
 
+#if BUILDFLAG(BRAVE_PAGE_GRAPH_ENABLED)
+// Sent to a proxy to register a remote frame creation event for the
+// FrameOwner of an out-of-process frame.
+IPC_MESSAGE_ROUTED1(FrameMsg_RegisterRemoteFrameCreated, GURL /* url */)
+#endif
+
 // Sent to a subframe to control whether to collapse its the frame owner element
 // in the embedder document, that is, to remove it from the layout as if it did
 // not exist.
@@ -1527,6 +1547,12 @@ IPC_MESSAGE_ROUTED1(FrameHostMsg_ForwardResourceTimingToParent,
 // out-of-process parent frame.
 IPC_MESSAGE_ROUTED0(FrameHostMsg_DispatchLoad)
 
+#if BUILDFLAG(BRAVE_PAGE_GRAPH_ENABLED)
+// Register a remote frame creation event for the FrameOwner of an
+// out-of-process frame.
+IPC_MESSAGE_ROUTED1(FrameHostMsg_RegisterRemoteFrameCreated, GURL /* url */)
+#endif
+
 // Sent by a frame proxy to the browser when a child frame finishes loading, so
 // that the corresponding RenderFrame can check whether its load has completed.
 IPC_MESSAGE_ROUTED0(FrameHostMsg_CheckCompleted)
