diff --git a/third_party/blink/renderer/core/frame/navigator.cc b/third_party/blink/renderer/core/frame/navigator.cc
index 45b962336182ec159b30867a019a5c6a0170b4e1..550dedf5c5cad6443e5afe3850656930a9583ff1 100644
--- a/third_party/blink/renderer/core/frame/navigator.cc
+++ b/third_party/blink/renderer/core/frame/navigator.cc
@@ -36,6 +36,11 @@
 #include "third_party/blink/renderer/platform/language.h"
 #include "third_party/blink/renderer/platform/memory_pressure_listener.h"
 
+#include "brave/third_party/blink/brave_page_graph/buildflags/buildflags.h"
+#if BUILDFLAG(BRAVE_PAGE_GRAPH_ENABLED)
+#include "brave/third_party/blink/brave_page_graph/page_graph.h"
+#endif
+
 namespace blink {
 
 Navigator::Navigator(LocalFrame* frame)
@@ -58,6 +63,25 @@ String Navigator::vendorSub() const {
 }
 
 String Navigator::platform() const {
+#if BUILDFLAG(BRAVE_PAGE_GRAPH_ENABLED)
+  {
+    String result = NavigatorID::platform();
+    if (GetFrame() &&
+        !GetFrame()->GetSettings()->GetNavigatorPlatformOverride().IsEmpty()) {
+      result = GetFrame()->GetSettings()->GetNavigatorPlatformOverride();
+    }
+
+    brave_page_graph::PageGraph* page_graph =
+      GetFrame()->GetDocument()->GetPageGraph();
+    if (page_graph != nullptr) {
+      page_graph->RegisterWebAPICall("NavigatorID.platform",
+        std::vector<const String>());
+      page_graph->RegisterWebAPIResult("NavigatorID.platform", result);
+    }
+
+    return result;
+  }
+#endif
   // TODO(955620): Consider changing devtools overrides to only allow overriding
   // the platform with a frozen platform to distinguish between
   // mobile and desktop when FreezeUserAgent is enabled.
@@ -74,6 +98,20 @@ String Navigator::userAgent() const {
   if (!GetFrame() || !GetFrame()->GetPage())
     return String();
 
+#if BUILDFLAG(BRAVE_PAGE_GRAPH_ENABLED)
+  {
+    brave_page_graph::PageGraph* page_graph =
+      GetFrame()->GetDocument()->GetPageGraph();
+    
+    if (page_graph != nullptr) {
+      String result = GetFrame()->Loader().UserAgent();
+      page_graph->RegisterWebAPICall("NavigatorID.userAgent",
+        std::vector<const String>());
+      page_graph->RegisterWebAPIResult("NavigatorID.userAgent", result);
+    }
+  }
+#endif
+
   return GetFrame()->Loader().UserAgent();
 }
 
@@ -89,6 +127,29 @@ bool Navigator::cookieEnabled() const {
   if (!GetFrame())
     return false;
 
+#if BUILDFLAG(BRAVE_PAGE_GRAPH_ENABLED)
+  {
+    Settings* settings = GetFrame()->GetSettings();
+    bool result = CookiesEnabled(GetFrame()->GetDocument());
+    if (!settings || !settings->GetCookieEnabled()) {
+      result = false;
+    }
+
+    brave_page_graph::PageGraph* page_graph =
+      GetFrame()->GetDocument()->GetPageGraph();
+    if (page_graph != nullptr) {
+      page_graph->RegisterWebAPICall("Navigator.cookieEnabled",
+        std::vector<const String>());
+
+      const String page_graph_result(result ? "true" : "false");
+      page_graph->RegisterWebAPIResult("Navigator.cookieEnabled",
+        page_graph_result);
+    }
+
+    return result;
+  }
+#endif
+
   Settings* settings = GetFrame()->GetSettings();
   if (!settings || !settings->GetCookieEnabled())
     return false;
