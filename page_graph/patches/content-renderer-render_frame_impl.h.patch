diff --git a/content/renderer/render_frame_impl.h b/content/renderer/render_frame_impl.h
index b1241cfbe4c2fb15bd00f742fa81e2d3afcdc9bc..e0aa6b8dd86e2dd5c99476fa8e891758a53321a4 100644
--- a/content/renderer/render_frame_impl.h
+++ b/content/renderer/render_frame_impl.h
@@ -102,6 +102,8 @@
 #include "url/gurl.h"
 #include "url/origin.h"
 
+#include "brave/third_party/blink/brave_page_graph/buildflags/buildflags.h"
+
 #if defined(OS_MACOSX)
 #include "third_party/blink/public/mojom/clipboard/clipboard.mojom.h"
 #endif
@@ -500,6 +502,12 @@ class CONTENT_EXPORT RenderFrameImpl
   double GetZoomLevel() override;
   void AddMessageToConsole(blink::mojom::ConsoleMessageLevel level,
                            const std::string& message) override;
+#if BUILDFLAG(BRAVE_PAGE_GRAPH_ENABLED)
+  void RegisterResourceBlockAd(const GURL& url,
+                               const std::string& rule);
+  void RegisterResourceBlockTracker(const GURL& url,
+                                    const std::string& host);
+#endif
   void SetPreviewsState(PreviewsState previews_state) override;
   PreviewsState GetPreviewsState() override;
   bool IsPasting() override;
@@ -778,6 +786,9 @@ class CONTENT_EXPORT RenderFrameImpl
   void ForwardResourceTimingToParent(
       const blink::WebResourceTimingInfo& info) override;
   void DispatchLoad() override;
+#if BUILDFLAG(BRAVE_PAGE_GRAPH_ENABLED)
+  void RegisterRemoteFrameCreated(const GURL& url) override;
+#endif
   blink::WebEffectiveConnectionType GetEffectiveConnectionType() override;
   void SetEffectiveConnectionTypeForTesting(
       blink::WebEffectiveConnectionType) override;
@@ -1130,6 +1141,12 @@ class CONTENT_EXPORT RenderFrameImpl
   void OnAddMessageToConsole(blink::mojom::ConsoleMessageLevel level,
                              const std::string& message,
                              bool discard_duplicates);
+#if BUILDFLAG(BRAVE_PAGE_GRAPH_ENABLED)
+  void OnRegisterResourceBlockAd(const GURL& url,
+                                 const std::string& rule);
+  void OnRegisterResourceBlockTracker(const GURL& url,
+                                      const std::string& host);
+#endif
   void OnVisualStateRequest(uint64_t key);
   void OnReload(bool bypass_cache);
   void OnReloadLoFiImages();
