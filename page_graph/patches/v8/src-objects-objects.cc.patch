diff --git a/src/objects/objects.cc b/src/objects/objects.cc
index 8cc22fa0e5cfb193d6aafcea861b7a346dc0d4b6..96f89245bb09e7b89a3f9dbd012fe7bfc794809f 100644
--- a/src/objects/objects.cc
+++ b/src/objects/objects.cc
@@ -116,6 +116,8 @@
 #include "src/wasm/wasm-objects.h"
 #include "src/zone/zone.h"
 
+#include "brave/third_party/blink/brave_page_graph/buildflags/buildflags.h"
+
 namespace v8 {
 namespace internal {
 
@@ -5819,14 +5821,30 @@ class StringSharedKey : public HashTableKey {
   // * When positive, position is the position in the source where eval is
   //   called. When negative, position is the negation of the position in the
   //   dynamic function's effective source where the ')' ends the parameters.
+#if BUILDFLAG(BRAVE_PAGE_GRAPH_ENABLED)
+  // * parent_script_id is the id of the script eval'ing this one, or 0 if not
+  //   applicable.
+#endif
   StringSharedKey(Handle<String> source, Handle<SharedFunctionInfo> shared,
-                  LanguageMode language_mode, int position)
+                  LanguageMode language_mode, int position
+#if BUILDFLAG(BRAVE_PAGE_GRAPH_ENABLED)
+                  , int parent_script_id
+#endif
+                  )
       : HashTableKey(CompilationCacheShape::StringSharedHash(
-            *source, *shared, language_mode, position)),
+            *source, *shared, language_mode, position
+#if BUILDFLAG(BRAVE_PAGE_GRAPH_ENABLED)
+            , parent_script_id
+#endif
+            )),
         source_(source),
         shared_(shared),
         language_mode_(language_mode),
-        position_(position) {}
+        position_(position)
+#if BUILDFLAG(BRAVE_PAGE_GRAPH_ENABLED)
+        , parent_script_id_(parent_script_id)
+#endif
+        {}
 
   bool IsMatch(Object other) override {
     DisallowHeapAllocation no_allocation;
@@ -5844,16 +5862,29 @@ class StringSharedKey : public HashTableKey {
     if (language_mode != language_mode_) return false;
     int position = Smi::ToInt(other_array.get(3));
     if (position != position_) return false;
+#if BUILDFLAG(BRAVE_PAGE_GRAPH_ENABLED)
+    int parent_script_id = Smi::ToInt(other_array.get(4));
+    if (parent_script_id != parent_script_id_) return false;
+#endif
     String source = String::cast(other_array.get(1));
     return source.Equals(*source_);
   }
 
   Handle<Object> AsHandle(Isolate* isolate) {
-    Handle<FixedArray> array = isolate->factory()->NewFixedArray(4);
+    Handle<FixedArray> array = isolate->factory()->NewFixedArray(
+#if BUILDFLAG(BRAVE_PAGE_GRAPH_ENABLED)
+        5
+#else
+        4
+#endif
+    );
     array->set(0, *shared_);
     array->set(1, *source_);
     array->set(2, Smi::FromEnum(language_mode_));
     array->set(3, Smi::FromInt(position_));
+#if BUILDFLAG(BRAVE_PAGE_GRAPH_ENABLED)
+    array->set(4, Smi::FromInt(parent_script_id_));
+#endif
     array->set_map(ReadOnlyRoots(isolate).fixed_cow_array_map());
     return array;
   }
@@ -5863,6 +5894,9 @@ class StringSharedKey : public HashTableKey {
   Handle<SharedFunctionInfo> shared_;
   LanguageMode language_mode_;
   int position_;
+#if BUILDFLAG(BRAVE_PAGE_GRAPH_ENABLED)
+  int parent_script_id_;
+#endif
 };
 
 v8::Promise::PromiseState JSPromise::status() const {
@@ -7020,7 +7054,11 @@ FeedbackCell SearchLiteralsMap(CompilationCacheTable cache, int cache_entry,
 
 MaybeHandle<SharedFunctionInfo> CompilationCacheTable::LookupScript(
     Handle<CompilationCacheTable> table, Handle<String> src,
-    Handle<Context> native_context, LanguageMode language_mode) {
+    Handle<Context> native_context, LanguageMode language_mode
+#if BUILDFLAG(BRAVE_PAGE_GRAPH_ENABLED)
+    , int parent_script_id
+#endif
+    ) {
   // We use the empty function SFI as part of the key. Although the
   // empty_function is native context dependent, the SFI is de-duped on
   // snapshot builds by the PartialSnapshotCache, and so this does not prevent
@@ -7029,7 +7067,11 @@ MaybeHandle<SharedFunctionInfo> CompilationCacheTable::LookupScript(
                                     native_context->GetIsolate());
   Isolate* isolate = native_context->GetIsolate();
   src = String::Flatten(isolate, src);
-  StringSharedKey key(src, shared, language_mode, kNoSourcePosition);
+  StringSharedKey key(src, shared, language_mode, kNoSourcePosition
+#if BUILDFLAG(BRAVE_PAGE_GRAPH_ENABLED)
+      , parent_script_id
+#endif
+      );
   int entry = table->FindEntry(isolate, &key);
   if (entry == kNotFound) return MaybeHandle<SharedFunctionInfo>();
   int index = EntryToIndex(entry);
@@ -7046,11 +7088,19 @@ MaybeHandle<SharedFunctionInfo> CompilationCacheTable::LookupScript(
 InfoCellPair CompilationCacheTable::LookupEval(
     Handle<CompilationCacheTable> table, Handle<String> src,
     Handle<SharedFunctionInfo> outer_info, Handle<Context> native_context,
-    LanguageMode language_mode, int position) {
+    LanguageMode language_mode, int position
+#if BUILDFLAG(BRAVE_PAGE_GRAPH_ENABLED)
+    , int parent_script_id
+#endif
+    ) {
   InfoCellPair empty_result;
   Isolate* isolate = native_context->GetIsolate();
   src = String::Flatten(isolate, src);
-  StringSharedKey key(src, outer_info, language_mode, position);
+  StringSharedKey key(src, outer_info, language_mode, position
+#if BUILDFLAG(BRAVE_PAGE_GRAPH_ENABLED)
+      , parent_script_id
+#endif
+      );
   int entry = table->FindEntry(isolate, &key);
   if (entry == kNotFound) return empty_result;
   int index = EntryToIndex(entry);
@@ -7077,7 +7127,11 @@ Handle<Object> CompilationCacheTable::LookupRegExp(Handle<String> src,
 Handle<CompilationCacheTable> CompilationCacheTable::PutScript(
     Handle<CompilationCacheTable> cache, Handle<String> src,
     Handle<Context> native_context, LanguageMode language_mode,
-    Handle<SharedFunctionInfo> value) {
+    Handle<SharedFunctionInfo> value
+#if BUILDFLAG(BRAVE_PAGE_GRAPH_ENABLED)
+    , int parent_script_id
+#endif
+    ) {
   Isolate* isolate = native_context->GetIsolate();
   // We use the empty function SFI as part of the key. Although the
   // empty_function is native context dependent, the SFI is de-duped on
@@ -7086,7 +7140,11 @@ Handle<CompilationCacheTable> CompilationCacheTable::PutScript(
   Handle<SharedFunctionInfo> shared(native_context->empty_function().shared(),
                                     isolate);
   src = String::Flatten(isolate, src);
-  StringSharedKey key(src, shared, language_mode, kNoSourcePosition);
+  StringSharedKey key(src, shared, language_mode, kNoSourcePosition
+#if BUILDFLAG(BRAVE_PAGE_GRAPH_ENABLED)
+      , parent_script_id
+#endif
+      );
   Handle<Object> k = key.AsHandle(isolate);
   cache = EnsureCapacity(isolate, cache, 1);
   int entry = cache->FindInsertionEntry(key.Hash());
@@ -7100,10 +7158,18 @@ Handle<CompilationCacheTable> CompilationCacheTable::PutEval(
     Handle<CompilationCacheTable> cache, Handle<String> src,
     Handle<SharedFunctionInfo> outer_info, Handle<SharedFunctionInfo> value,
     Handle<Context> native_context, Handle<FeedbackCell> feedback_cell,
-    int position) {
+    int position
+#if BUILDFLAG(BRAVE_PAGE_GRAPH_ENABLED)
+    , int parent_script_id
+#endif
+    ) {
   Isolate* isolate = native_context->GetIsolate();
   src = String::Flatten(isolate, src);
-  StringSharedKey key(src, outer_info, value->language_mode(), position);
+  StringSharedKey key(src, outer_info, value->language_mode(), position
+#if BUILDFLAG(BRAVE_PAGE_GRAPH_ENABLED)
+      , parent_script_id
+#endif
+      );
   {
     Handle<Object> k = key.AsHandle(isolate);
     int entry = cache->FindEntry(isolate, &key);
