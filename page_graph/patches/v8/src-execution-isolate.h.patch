diff --git a/src/execution/isolate.h b/src/execution/isolate.h
index 4b4bf9cd7c61687b0f36da1eaa672979c59dab67..123b99232e4dccd0b7afd06680be90ae75d8deff 100644
--- a/src/execution/isolate.h
+++ b/src/execution/isolate.h
@@ -35,6 +35,8 @@
 #include "src/strings/unicode.h"
 #include "src/utils/allocation.h"
 
+#include "brave/third_party/blink/brave_page_graph/buildflags/buildflags.h"
+
 #ifdef V8_INTL_SUPPORT
 #include "unicode/uversion.h"  // Define U_ICU_NAMESPACE.
 namespace U_ICU_NAMESPACE {
@@ -1545,6 +1547,37 @@ class Isolate final : private HiddenFactory {
 
   V8_EXPORT_PRIVATE void SetIdle(bool is_idle);
 
+#if BUILDFLAG(BRAVE_PAGE_GRAPH_ENABLED)
+  int GetExecutingScriptId();
+
+  EvalScriptCompiledFunc GetEvalScriptCompiledFunc() const {
+    return eval_script_compiled_func_;
+  }
+
+  void SetEvalScriptCompiledFunc(const EvalScriptCompiledFunc func) {
+    eval_script_compiled_func_ = func;
+  }
+
+  BuiltInFuncCallFunc GetBuiltInFuncCallFunc() const {
+    return built_in_func_call_func_;
+  }
+
+  void SetBuiltInFuncCallFunc(const BuiltInFuncCallFunc func) {
+    built_in_func_call_func_ = func;
+  }
+
+  BuiltInFuncResponseFunc GetBuiltInFuncResponseFunc() const {
+    return built_in_func_response_func_;
+  }
+
+  void SetBuiltInFuncResponseFunc(const BuiltInFuncResponseFunc func) {
+    built_in_func_response_func_ = func;
+  }
+
+  void ReportBuiltInCallAndResponse(const char* func_name,
+    const std::vector<const std::string>& args, const std::string& result);
+#endif
+
  private:
   explicit Isolate(std::unique_ptr<IsolateAllocator> isolate_allocator);
   ~Isolate();
@@ -1863,6 +1896,12 @@ class Isolate final : private HiddenFactory {
   base::Mutex thread_data_table_mutex_;
   ThreadDataTable thread_data_table_;
 
+#if BUILDFLAG(BRAVE_PAGE_GRAPH_ENABLED)
+  EvalScriptCompiledFunc eval_script_compiled_func_ = nullptr;
+  BuiltInFuncCallFunc built_in_func_call_func_ = nullptr;
+  BuiltInFuncResponseFunc built_in_func_response_func_ = nullptr;
+#endif
+
   // Delete new/delete operators to ensure that Isolate::New() and
   // Isolate::Delete() are used for Isolate creation and deletion.
   void* operator new(size_t, void* ptr) { return ptr; }
